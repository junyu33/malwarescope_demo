import sys
from ispacked import is_pe_packed

# Your input text, from 2024/files_with_ttp_api/map.txt
input_text = """
ttp = ["T1063"]
filter_apinames = ["LdrLoadDll", "LdrGetDllHandle"]
additional = ["snxhk"]
ttp = ["T1063"]
filter_apinames = ["LdrLoadDll", "LdrGetDllHandle"]
additional = ["avcuf32"]
ttp = ["T1031"]
filter_apinames = ["OpenService"]
additional = ["ControlService"]    
ttp = ["T1057"]
filter_apinames = ["LdrGetProcedureAddress"]
additional = ["HKEY_CURRENT_USER\\Software\\Wine"]
ttp = ["T1115"]	
filter_apinames = ["GetClipboardData"]
additional = []
ttp = ["T1082"]
filter_apinames = ["NtQuerySystemInformation"]
additional = ["SystemProcessorPerformanceInformation"]
ttp = ["T1089"]
filter_apinames = ["__anomaly__"]
additional = []
ttp = ["T1007"]
filter_apinames = ["EnumServicesStatus"]
additional = ["SYSTEM\\ControlSet001\\Services"]
ttp = ["T1082"]
filter_apinames = ["NtCreateFile"]
additional = ["\\hgfs", "\\vmci"]
ttp = ["T1067"]
filter_apinames = ["ShellExecute", "CreateProcessInternal"]
additional = ["bcdedit"]
ttp = ["T1067"]
filter_apinames = ["NtCreateFile", "NtDuplicateObject", "NtOpenFile", "NtClose", "NtSetInformationFile", "NtWriteFile", "DeviceIoControl", "NtDeviceIoControlFile"]
additional = ["\\physicaldrive0", "NtDeviceIoControlFile", "IOCTL_SCSI_PASS_THROUGH_DIRECT"]
ttp = ["T1158"]
filter_apinames = ["NtCreateFile"]
additional = ["SetFileAttributes"]
ttp = ["T1031"]
filter_apinames = ["CreateServiceA", "CreateServiceW", "StartServiceA", "StartServiceW"]
additional = []
ttp = ["T1129"]
filter_apinames = ["CreateProcessInternalW", "ShellExecuteExW"]
additional = ["\\AppData"]
ttp = ["T1089"]
filter_apinames = ["NtWriteFile", "RegSetValueExA", "RegSetValueExW", "NtSetValueKey"]
additional = ["firefox", "chrome"]
ttp = ["T1115"]
filter_apinames = ["AddClipboardFormatListener", "SetClipboardViewer"]
additional = []
ttp = ["T1055"]
filter_apinames = ["Process32NextW", "FindWindowW", "SendNotifyMessageA"]
additional = ["SendNotifyMessage", "explorer.exe", "Shell_TrayWnd"]
ttp = ["T1071"]
filter_apinames = ["InternetConnectA", "InternetConnectW", "InternetCrackUrlA", "InternetCrackUrlW", "InternetCrackUrlA", "InternetCrackUrlW", "URLDownloadToFileA","URLDownloadToFileW", "URLDownloadToCacheFileA", "URLDownloadToCacheFileW", "HttpOpenRequestA","HttpOpenRequestW", "WSASend", "send", "sendto", "connect"]
additional = ["127.", "10.", "172.16.", "192.168."]
ttp = ["T1040"]
filter_apinames = ["RegSetValueExA", "RegSetValueExW", "NtSetValueKey"]
additional = ["internet settings\\wpad", "internet settings\\proxyoverride", "internet settings\\autoconfigurl", "internet settings\\proxyenable"]
ttp = ["T1096"]
filter_apinames = ["NtCreateFile", "NtWriteFile"]
additional = ["zone"]
ttp = ["T1071"]
filter_apinames = ["InternetOpenA", "InternetOpenW"]
additional = []
ttp = ["T1188"]
filter_apinames = ["CreateServiceA", "CreateServiceW"]
additional = ["\\tor\\"]
ttp = ["T1203"]
filter_apinames = ["CreateProcessInternalW"]
additional = ["powerpnt.exe"]
ttp = ["T1203"]
filter_apinames = ["vbe6_CreateObject", "vbe6_GetObject", "vbe6_Invoke"]
additional = []
ttp = ["T1071"]
filter_apinames = ["InternetCrackUrlW", "InternetCrackUrlA", "URLDownloadToFileW", "URLDownloadToCacheFileW", "HttpOpenRequestW", "WSASend", "send"]
additional = ["wordview.exe", "winword.exe", "excel.exe", "powerpnt.exe", "outlook.exe", "acrord32.exe", "acrord64.exe", "wscript.exe", "mspub.exe", "powershell.exe"]
ttp = ["T1129"]
filter_apinames = ["NtWriteFile", "CreateProcessInternalW", "ShellExecuteExW", "NtCreateFile", "recv", "InternetReadFile"]
additional = ["wordview.exe", "winword.exe", "excel.exe", "powerpnt.exe", "outlook.exe", "wscript.exe", "java.exe", "javaw.exe", "powershell.exe"]
ttp = ["T1129"]
filter_apinames = ["recv", "InternetReadFile"]
additional = ["wordview.exe", "winword.exe", "excel.exe", "powerpnt.exe", "outlook.exe", "acrord32.exe", "acrord64.exe", "wscript.exe", "java.exe", "javaw.exe", "powershell.exe"]
ttp = ["T1053"]
filter_apinames = ["RegSetValueExA", "RegSetValueExW", "NtSetValueKey", "CreateServiceA", "CreateServiceW"]
additional = ["Microsoft\\Windows\\CurrentVersion\\Run", "\\AppInit_DLLs", "\\Installed Components", "\\ImagePath", "\\Debugger", "\\ServiceDll", "\\LocalServer32", "Winlogon\\Userinit", "Winlogon\\Notify"] 
ttp = ["T1053"]
filter_apinames = ["RegGetValueA", "RegGetValueW"]
additional = ["exefile\\shell\\open\\command\\(Default)"]
ttp = ["T1060"]
filter_apinames = ["RegGetValueA", "RegGetValueW"]
additional = ["exefile\\shell\\open\\command\\(Default)"]
ttp = ["T1060"]
filter_apinames = ["RegSetValueExA", "RegSetValueExW", "NtSetValueKey"]
additional = ["\\BootExecute", "\\SetupExecute", "\\Execute", "\\S0InitialCommand"]
ttp = ["T1112"]
filter_apinames = ["RegSetValueExA", "RegSetValueExW", "NtSetValueKey"]
additional = ["StartPage2\\ProgramsCache"]
ttp = ["T1057"]
filter_apinames = ["Process32Next", "Process32First"]
additional = []
ttp = ["T1057"]
filter_apinames = ["Process32Next", "NtOpenProcess"]
additional = []
ttp = ["T1071"]
filter_apinames = ["ObtainUserAgentString", "InternetOpenA", "InternetOpenW"]
additional = []
ttp = ["T1082"]
filter_apinames = ["RegQueryValueExA", "RegQueryValueExW"]
additional = ["\\microsoft\\windows\\currentversion\\uninstall"]
ttp = ["T1012"]
filter_apinames = ["RegOpenKeyExA", "RegOpenKeyExW"]
additional = ["\\microsoft\\windows\\currentversion\\uninstall"]
ttp = ["T1036"]
filter_apinames = ["CreateProcessInternalW", "ShellExecuteExW"]
additional = ["csrss.exe", "explorer.exe", "lsass.exe", "spoolsv.exe", "services.exe", "svchost.exe", "taskmgr.exe", "winlogin.exe"]
ttp = ["T1047"]
filter_apinames = ["IWbemServices_ExecMethod", "IWbemServices_ExecMethodAsync"]
additional = []
"""

def analyze(filename, contents):
    if contents == None:
        return 0

    line_num = 0
    line_list = []
    with open(filename, encoding='utf-8', errors='ignore') as f:
        for line in f:
            line_num += 1
            for content in contents:
                if content in line:
                    line_list.append(line_num)
    
    if len(line_list) == 0:
        return -1
    return line_list

def judge(filename, apis, additionals):
    # print(filename, apis, additionals)
    # print(analyze(filename, apis), analyze(filename, additionals))
    # judge if this stacktrace both have apinames and its additional requirements
    X = analyze(filename, apis)
    Y = analyze(filename, additionals)
    if (X == -1 or Y == -1):
        return -1
    return X

lines = input_text.strip().split('\n')

# Initializing a dictionary to hold the mapping
ttp_to_apinames = {}
ttp_to_additional = {}

# Variables to hold the current ttp and filter_apinames being processed
current_ttp = None
apinames = None

# all_files = os.listdir('stktrace_output_new')
all_files = [sys.argv[1]]

for files in all_files:
    result = set()
    corr_line = []
    path = 'stktrace_output_new/' + files
    pepath = 'malware_sample/' + files[:-4]
    #if is_pe_packed(pepath):
    #    result.add("T1045")

    # Iterating through each line in the input text
    for line in lines:
        # Checking if the line contains a ttp assignment
        if line.startswith("ttp ="):
            # Extracting the ttp code from the line
            current_ttp = line.split('["')[1].split('"]')[0]
        # Checking if the line contains a filter_apinames assignment
        elif line.startswith("filter_apinames ="):
            # Extracting the filter_apinames from the line
            try:
                apinames = line.split('["')[1].split('"]')[0].split('", "')
            except:
                apinames = None

        elif line.startswith("additional ="):
            # Extracting the additional from the line
            try:
                additionals = line.split('["')[1].split('"]')[0].split('", "')
            except:
                additionals = None
        
            # having the judge
            corr_line_tmp = judge(path, apinames, additionals)
            if corr_line_tmp != -1 and not (additionals == None and apinames == None):
                result.add(current_ttp)
                corr_line.append(corr_line_tmp)

    print(result, files, corr_line)
